apiVersion: observability.openshift.io/v1alpha1
kind: UIPlugin
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: distributed-tracing
spec:
  type: DistributedTracing
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    sidecar.istio.io/inject: "true"
  name: otel
  namespace: otel
spec:
  autoscaler:
    maxReplicas: 3
    minReplicas: 1
  config:
    connectors:
      spanmetrics:
        metrics_flush_interval: 15s
    exporters:
      debug:
        verbosity: normal
      otlp/tempo:
        auth:
          authenticator: bearertokenauth
        endpoint: tempo-tempo-gateway.openshift-tempo.svc.cluster.local:8090
        headers:
          X-Scope-OrgID: dev
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      prometheus:
        add_metric_suffixes: false
        endpoint: 0.0.0.0:8889
        resource_to_telemetry_conversion:
          enabled: true
    extensions:
      bearertokenauth:
        filename: /var/run/secrets/kubernetes.io/serviceaccount/token
    processors:
      k8sattributes: {}
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    service:
      extensions:
      - bearertokenauth
      pipelines:
        metrics:
          exporters:
          - prometheus
          receivers:
          - spanmetrics
        traces:
          exporters:
          - otlp/tempo
          - spanmetrics
          - debug
          processors:
          - k8sattributes
          receivers:
          - otlp
      telemetry:
        logs:
          level: INFO
        metrics:
          level: normal
  mode: deployment
  observability:
    metrics:
      enableMetrics: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi
  serviceAccount: otel-collector
---
apiVersion: tempo.grafana.com/v1alpha1
kind: TempoStack
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: tempo
  namespace: openshift-tempo
spec:
  observability:
    metrics:
      createPrometheusRules: true
      createServiceMonitors: true
  replicationFactor: 1
  resources:
    total:
      limits:
        cpu: "3"
        memory: 3Gi
  retention:
    global:
      traces: 48h0m0s
  search:
    maxDuration: 0s
    maxResultLimit: 20
  storage:
    secret:
      name: s3-bucket-tempo
      type: s3
  storageSize: 1Gi
  template:
    gateway:
      enabled: true
    querier:
      replicas: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
    queryFrontend:
      component:
        replicas: 1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
      jaegerQuery:
        enabled: true
        monitorTab:
          enabled: true
          prometheusEndpoint: https://thanos-querier.openshift-monitoring.svc.cluster.local:9091
  tenants:
    authentication:
    - tenantId: dev-id
      tenantName: dev
    - tenantId: prod-id
      tenantName: prod
    mode: openshift
