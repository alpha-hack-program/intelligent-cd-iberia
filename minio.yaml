---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
  name: minio
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-manage
  namespace: minio
---
kind: Secret
apiVersion: v1
metadata:
  name: minio-root-user
  namespace: minio
stringData:
  # change the username and password to your own values.
  # ensure that the user is at least 3 characters long and the password at least 8
  MINIO_ROOT_USER: minio
  MINIO_ROOT_PASSWORD: minio123
---
kind: Secret
apiVersion: v1
metadata:
  name: minio-user
  namespace: minio
stringData:
  # change the username and password to your own values.
  # ensure that the user is at least 3 characters long and the password at least 8
  minio_root_user: minio
  minio_root_password: minio123
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: minio
  namespace: minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  volumeMode: Filesystem
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-manage-admin
  namespace: minio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: minio-manage
---
kind: Service
apiVersion: v1
metadata:
  name: minio
  namespace: minio
spec:
  ipFamilies:
    - IPv4
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: ui
      protocol: TCP
      port: 9090
      targetPort: 9090
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    app: minio
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: minio
  namespace: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio
      containers:
        - resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 20m
              memory: 100Mi
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: minio
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-user
                  key: minio_root_user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-user
                  key: minio_root_password
          ports:
            - containerPort: 9000
              protocol: TCP
            - containerPort: 9090
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
              subPath: minio
          terminationMessagePolicy: File
          # Latest release with full feature set
          image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z 
          args:
            - server
            - /data
            - --console-address
            - :9090
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: batch/v1
kind: Job
metadata:
  name:  create-s3-bucket-intelligent-cd-pipelines
  namespace: minio
  labels:
    app: create-s3-bucket
    component: s3-bucket-creation
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels:
        app: create-s3-bucket
        component: s3-bucket-creation
    spec:
      containers:
      - name: s3-bucket-creator
        image: quay.io/alopezme/aws-cli:latest
        imagePullPolicy: Always
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash
          AWS_S3_BUCKET="intelligent-cd-pipelines"
          AWS_ENDPOINT_URL="http://minio:9000"
          export AWS_ACCESS_KEY_ID=minio
          export AWS_SECRET_ACCESS_KEY=minio123
          export AWS_DEFAULT_REGION=none

          # # Print environment variables
          # echo -e "\n=============="
          # echo -e "ENVIRONMENT VARIABLES:"
          # echo -e " * AWS_ENDPOINT_URL: $AWS_ENDPOINT_URL"
          # echo -e " * AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          # echo -e " * AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          # echo -e " * AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          # echo -e " * AWS_S3_BUCKET: $AWS_S3_BUCKET"
          # echo -e "==============\n"

          # Check if the bucket exists in MinIO
          if aws --endpoint-url $AWS_ENDPOINT_URL --no-verify-ssl s3api head-bucket --bucket $AWS_S3_BUCKET &> /dev/null; then
              echo -e "Check. S3 bucket already exists in MinIO, do nothing."
          else
              echo -e "Check. Creating S3 bucket in MinIO..."
              aws --endpoint-url $AWS_ENDPOINT_URL --no-verify-ssl s3api create-bucket \
                  --bucket $AWS_S3_BUCKET \
                  --region $AWS_DEFAULT_REGION \
                  --create-bucket-configuration LocationConstraint=$AWS_DEFAULT_REGION
          fi

      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: batch/v1
kind: Job
metadata:
  name:  create-s3-bucket-intelligent-cd-tempo
  namespace: minio
  labels:
    app: create-s3-bucket
    component: s3-bucket-creation
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels:
        app: create-s3-bucket
        component: s3-bucket-creation
    spec:
      containers:
      - name: s3-bucket-creator
        image: quay.io/alopezme/aws-cli:latest
        imagePullPolicy: Always
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash
          AWS_S3_BUCKET="intelligent-cd-tempo"
          AWS_ENDPOINT_URL="http://minio:9000"
          export AWS_ACCESS_KEY_ID=minio
          export AWS_SECRET_ACCESS_KEY=minio123
          export AWS_DEFAULT_REGION=none

          # # Print environment variables
          # echo -e "\n=============="
          # echo -e "ENVIRONMENT VARIABLES:"
          # echo -e " * AWS_ENDPOINT_URL: $AWS_ENDPOINT_URL"
          # echo -e " * AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          # echo -e " * AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          # echo -e " * AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          # echo -e " * AWS_S3_BUCKET: $AWS_S3_BUCKET"
          # echo -e "==============\n"

          # Check if the bucket exists in MinIO
          if aws --endpoint-url $AWS_ENDPOINT_URL --no-verify-ssl s3api head-bucket --bucket $AWS_S3_BUCKET &> /dev/null; then
              echo -e "Check. S3 bucket already exists in MinIO, do nothing."
          else
              echo -e "Check. Creating S3 bucket in MinIO..."
              aws --endpoint-url $AWS_ENDPOINT_URL --no-verify-ssl s3api create-bucket \
                  --bucket $AWS_S3_BUCKET \
                  --region $AWS_DEFAULT_REGION \
                  --create-bucket-configuration LocationConstraint=$AWS_DEFAULT_REGION
          fi

      restartPolicy: Never
  backoffLimit: 3
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: minio-api
  namespace: minio
spec:
  to:
    kind: Service
    name: minio
    weight: 100
  port:
    targetPort: api
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: minio-ui
  namespace: minio
spec:
  to:
    kind: Service
    name: minio
    weight: 100
  port:
    targetPort: ui
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
